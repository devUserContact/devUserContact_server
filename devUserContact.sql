-- MariaDB dump 10.19  Distrib 10.6.8-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: Blog_devUserContact
-- ------------------------------------------------------
-- Server version	10.6.8-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blog_post`
--

DROP TABLE IF EXISTS `blog_post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `subtitle` varchar(255) DEFAULT NULL,
  `body` text DEFAULT NULL,
  `media` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`media`)),
  `tags` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`tags`)),
  `submission_date` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_post`
--

LOCK TABLES `blog_post` WRITE;
/*!40000 ALTER TABLE `blog_post` DISABLE KEYS */;
INSERT INTO `blog_post` VALUES (1,'My First Blog Post','Excited to share my developments with the web','Greetings all,\n\nThis is a first for me, but I\'m quite intrigued to be able to share my projects\nwith the world through this blog template that I\'ve created.\nfor my first post I will demonstrate my affinity for [figlet][1] by using a \n_codeblock_:\n```\n _          _   _                             _        \n| |        | | | |                           | |    |  \n| |     _  | | | |  __             __   ,_   | |  __|  \n|/ \\   |/  |/  |/  /  \\_  |  |  |_/  \\_/  |  |/  /  |  \n|   |_/|__/|__/|__/\\__/    \\/ \\/  \\__/    |_/|__/\\_/|_/\n```\nI\'ve always enjoyed figlet; it brings me nostalgic memories of beginning to\nplay around in the terminal and becoming interested in code. That\'s all for\nnow, I hope that you continue to enjoy these posts.\n\nbest,\ndevUserContact üê¶\n\n[1]:https://en.wikipedia.org/wiki/FIGlet \"figlet wiki\"','{\"media\": {}}','{\"tags\":[\"first post\",\"hello world\", \"figlet\"]}','2022-07-26 05:30:00'),(2,'A Little Info About This Blog','A few things about this blog while I continue building it','I have been learning a lot while building this blog. I\'ll explain a bit about\nthe tech stack that I used to develop it. I will provide links throughout this\npost so you may investigate these languages and frameworks for yourself. \n___\n\n__The Database: MariaDB hosted on Linode server__\n\nI chose [MariaDB][1] for my database; while searching for potential options, I had \nread that their website has excellent documentation. I was not disapointed! \nConcepts in the documentation are explained clearly with great examples as \nwell. MariaDB is also a fork of [MySQL][2] so it\'s nice to know that what you learn \nwill carry over to other relational database languages.\n\nI chose to host my database on [Linode][3] because I enjoy using Linux operating\nsystems. I\'m using their [Alpine][4] distribution option because it is their most\nlightweight offering so it pairs well with their most basic hosting plan.\nLinode also has an excellent dashboard with analytics that provide plenty of\ndata on your node as well as account security. \n___\n\n__The Backend: Nodejs hosted on Digital Ocean__\n\n[Nodejs][5] is a good framework to start learning backend programming because it is\nbuilt on top of the JavaScript language. So far, the backend that I have\nconstructed for this blog is somewhat simple; but I plan on expanding its\nfunctionality over time. \n\n[Digital Ocean][6] is a hosting service that I\'ve wanted to\ntry for a while (having used [Heroku][7] before); and I\'ve been enjoying the user\nexperience so far. Regarding my experience configuring my backend application, \nI had to do a little digging to understand how to edit your app\'s encrypted \nenvironment variables after its been deployed. Their [CLI][8] is nice as well. \n___\n\n__The Frontend: Nextjs hosted on Netlify__\n\n[Nextjs][9] is an opinionated react framework that requires less configuration than\na vanilla [react][10] app. I\'ve built a few apps with Nextjs so this blog project was \na great opportunity for me to take a deeper dive into the framework. Nextjs has\nuseful tools built in such as a ESLint and an optimized router. \n\n[Netlify][11] was an easy choice to make for hosting my frontend simply for its free \ntier plan. Their basic plan is more than effective for hosting even multiple\nprojects, You get 300 minutes of build time per month and free custom URLs when using \nthe _netlify.app_ domain. They also provide a useful link that displays the\nstatus of your app; this is especially useful for your repository _README.md_ on GitHub.\n___\n\n__Final Thoughts:__\n\nThis blog was my first project where I attempted to tackle a full-stack \narchitecture. It\'s been a great learning experience and has given me the\npractical knowledge to be able to conceptualize how I may develop larger \nprojects going forward. I hope that this article might have been useful to\nyou. \n\ncoding on, devUserContact üê¶\n\n[1]:https://mariadb.org/\n[2]:https://en.wikipedia.org/wiki/MySQL\n[3]:https://www.linode.com/\n[4]:https://www.alpinelinux.org/\n[5]:https://nodejs.org/en/about/\n[6]:https://www.digitalocean.com/\n[7]:https://en.wikipedia.org/wiki/Heroku\n[8]:https://docs.digitalocean.com/reference/doctl/\n[9]:https://nextjs.org/\n[10]:https://en.wikipedia.org/wiki/React_(JavaScript_library)\n[11]:https://www.netlify.com/','{\"media\":{}}','{\"tags\":[\"tech stack\", \"full stack\", \"web dev\"]}','2022-08-09 17:39:18'),(3,'Blog Updates','Cataloging some developments','I\'ve been busy building out my blogs backend and general infrastructure. Here\nis a list of some things that have been implemented and improved: \n___\n\n__I designed my backend to deliver data from separate databases to multiple blogs__\n\n* The decision to use one backend application for multiple blogs was a\n	practical one upon realizing the potential monthly cost of running separate \n	backend applications.\n* For me, Developing this application was a great first contact with the concept \n	of an application using multiple databases and [multi-tenant\n	architecture][2].\n___\n\n__I migrated my backend application to the java language__\n\n* Within java I used [Spring Boot Framework][1] \n* While I found Spring boot somewhat opinionated I grew to appreciate its\n	robust design patterns.\n* Setting up my Java Spring Boot application as my backend meant configuring a \n	server on Linode. \n	* This required that I manually configure SSL certificates as well as a custom \n		CORS configuration. I was able to accomplish this with by implementing a \n		reverse proxy with [Iginx][3].\n___		\n\n__I implemented [GraphQL][4] into my stack__\n\n* The process of implementing GraphQL into my existing project was simple\n	enough and provided the benefit of being able to easily standardize variable \n	names across all of my front end applications.\n* GraphQL has great potential for efficiency because it helps to solve a problem\n	called over-fetching. This can occur when a `GET`request is made by the front\n	end for a whole row of data when only one column of that row is needed \n	to perform a function. \n___\n\n__I have started an art blog__\n\n* You can visit my new blog at [artusercontact.com][5]	\n* With this art blog being slightly more abstract than my blog here are\n	_devUserContact_, I am able to test and implement features on my blogs more \n	easily.\n* I\'m loving the ethos of computer programming regarding duplication and \n	variation. It becomes so easy to execute variations of the same idea. There\n	is truly so much one can accomplish with code. \n* With this art blog complete as proof of concept; I can say with certainty\n	that there will be more blogs on different subjects to come.   	\n___\n\n__Thoughts:__\n\nWith having learned so much through implementing these changes in my stack, I\nam inspired and excited to learn even more as I progress in the field of\nweb development and computer programming. As always, I hope that you have found \nmy posts even remotely informative. My _toDoList&period;md_ has been getting pretty long \nso stay tuned for more updates and projects. \n\ncode on, devUserContact üê¶\n\n[1]:https://www.ibm.com/cloud/learn/java-spring-boot\n[2]:https://www.ibm.com/blogs/cloud-archive/2016/10/what-is-a-multitenant-database-architecture/\n[3]:https://en.wikipedia.org/wiki/Nginx\n[4]:https://en.wikipedia.org/wiki/GraphQL\n[5]:https://artusercontact.com','{\"\": [\"\"]}','{\"tags\":[\"update\", \"full stack\", \"java\", \"graphql\"]}','2022-09-29 16:18:54'),(4,'Emoji Fortune: My latest project','a fun application for your next fortune reading üîÆ','I\'m pleased to debut my most recent project: [Emoji Fortune][1]\n\nEmoji Fortune is an app that reveals your fortune in a unique set of emoji. \nI had a great time developing this idea; I managed to make a few improvements in my \nworkflow this time around. For the first time, I used a bash script that I wrote \nto automatically generate a custom template for my Next.js app. I enjoyed the\nbenefits of not having to remove the default Next.js page, it honestly felt\nlike it saved me a considerable amount of time. \n\nSomething interesting that came about while developing this app was the task\nof creating a JSON file that contained all of the current emoji. I decided to \ncreate a separate GitHub repository for it so that it could be shared easily:\n[Emoji - Complete List][2] \n\nI am excited to continue implementing ideas for this project because I find\nemoji so amusing. I am also inspired by the potential this app has to create a moment of \nenjoyment for anyone. To me, it is great that the internet can be used for this \npurpose.\n\ncode on, devUserContact üê¶\n\n[1]:https://emojifortune.com\n[2]:https://github.com/devUserContact/emoji_completeList.git','{\"\": [\"\"]}','{\"tags\":[\"emoji\", \"json\", \"nextjs\"]}','2022-11-02 19:45:50'),(5,'My First Pull Request','Thoughts on Github','In my daily programming adventures, I was able to accomplish something pretty \nsweet. I made my first pull request on [Github][1]! Even more exciting, The\npull request was merged to the main repository! \n\nI use Github for personal projects almost everyday. However the prospect\nof coming across an error in someone else\'s repository and, on top of that,\nknowing what could be done to correct said error always felt out of reach to me. \nNow I realize that making a pull request is more about everyone helping each other \nimprove the quality of code wherever possible. So what is this error I had\ndiscovered that I was also able to fix? Was is patching some security flaw in a\nrepository that is responsible for facilitating global fiscal transactions? Was\nit fixing a bug in a popular framework so that hundreds of thousands of devs \ncould now be spared a headache debugging their projects?? \n\nI\'ll tell you what I was able to fix; it was a typo in a `README` file that \ncontained a broken link! Here is how it happened. \n\nI\'ve been a little more active of Github lately because I\'ve been branching\nout trying to get into some new languages; currently I\'ve been pretty interested\nin [Rust][2]. Rust is a great language for exploring generally younger\nrepositories on Github because the Rust language has a great [open-source][3]\ncommunity that is currently growing steadily with new projects being started often. \nI was trying out a game engine written in Rust called [Bevy][4]. I was\ndownloading a bunch of different [Bevy Assets][5] to try out for a game dev\nproject that I\'m planning on starting. When I was diving into some of the\ndocumentation on these bevy plugins I was executing a lot of the code examples\nthat are included in their repective Github repositories. Upon running\none of the examples I noticed that a name change in one of the example rust\nfiles had not yet been updated in the repositories `README` where the examples where\nlisted. I was surprised to discover this but I quickly started researching how\nto properly submit a pull request on Github. I was able to submit the typo edit\nto the main repository where my commits would eventually would be merged. \n\nIn this experience I came to the realize how open Github truly is. Being able to\ncontribute to any public repository is an indispensable feature that should be\nutilized and not avoided due to its perceived complexity. As for the repository\nthat I was able to make my small contribution, check out [bevy_ecs_tilemap][6]! \nIt is a great Rust crate for designing tile-maps in a manner that fits the [ECS][7] \ndesign pattern of Bevy.\n\nI am looking forward to continuing working on my projects in computer\nprogramming with my newfound enthusiasm for Github and the open source\necosystem. If I could offer any advice on the subject of leveling up your\ngit / Github skills it would be this. Once you get comfortable using git /\nGithub, try to use all the features! You might be surprised on how code\ncollaborating can encourage, as well as, inspire you development process. Using\nGithub in this way will increase your exposure to code and will acclimate you\nto the vastness of the open-source ecosystem. Eventually you might find that\nyou knew more than you thought you did all along. \n\nas always, code on, \n\ndevUserContact üê¶\n\n[1]:https://github.com/\n[2]:https://www.rust-lang.org/\n[3]:https://en.wikipedia.org/wiki/Open_source\n[4]:https://bevyengine.org/\n[5]:https://bevyengine.org/assets/#templates\n[6]:https://github.com/StarArawn/bevy_ecs_tilemap\n[7]:https://en.wikipedia.org/wiki/Entity_component_system','{\"\": [\"\"]}','{\"tags\":[\"github\", \"rust\", \"open-source\"]}','2022-12-20 22:08:31'),(6,'What Has devUserContact Been Up To??','My programming journey as of late!','It has been a while since I have posted on this blog; but in all honesty, It is because I have been quite busy! \nallow me to fill you in on what I\'ve been up to. \n___\nI am proud to announce that I have recently completed two certificate programs! The first certificate is one that I had been studying for on Coursera.\nThis was a course offered by Google on the subject Data Analytics. I found it tremendously informative and I feel like the course did a great job in \nsolidifying some of the fundamentals in a modern approach to programming.\nAfter all, almost all of what one deals with in computer programming involves data and the interpretation of data. This course helped me to formalize my understanding of [The Data Life Cycle][1], which, in turn, \nhelped me to achieve a more complete global understanding of my projects. The Google Data Analytics course also contained a great unit on writing larger SQL queries which\nI found quite illuminating and useful.\n\nThe second certificate that I completed more recently was from the NVIDIA [Machine Learning Institute][2]. This course was Fundamentals of Deep Learning, something that I have \nfound interesting for a while now. It was a great to get my bearings in this expanding field of computer science. For the final test I had to create a [neural network][3] that leveraged\n[computer vision][4] to categorize images of fruit; we had to train our model to 95% accuracy! It was nice to get hands on experience with machine learning as well as receive an \nan introduction into how neural networks are trained and employed. I am especially looking forward to implementing the concepts that I learned in this course into my projects. \n\nWhile taking the _Fundamentals of Deep Learning_ course I also virtually attended [NVIDIA\'s GTC][5] (__G__PU __T__echnology __C__onference). I must say that it was actually \nmind-blowing. There are so many emerging industries in AI and Machine Learning, and tuning in to GTC was honestly an excellent opportunity to be able to get up to \nspeed on all the new paradigms and technology in this field. Between the NVIDIA conference and course I was able to learn a lot about this exciting new frontier.\n___\nAside from resuming regular commits on my GitHub, this is a bit of what I have been up to development wise. I have added some new features to this blog such as animated \nloading text. I also implemented a [ThreeJS][6] graphic on the landing page that you can checkout [_here_][7]! Thanks for taking the time to check in on my development blog; it\'s \nalways a pleasure to be able to write these posts that keep folks in the loop on my programming endeavors. \n\ncode on, \ndevUserContact üê¶\n\n[1]:https://www.ibm.com/topics/data-lifecycle-management\n[2]:https://www.nvidia.com/en-us/training/\n[3]:https://en.wikipedia.org/wiki/Neural_network\n[4]:https://en.wikipedia.org/wiki/Computer_vision\n[5]:https://en.wikipedia.org/wiki/Nvidia_GTC\n[6]:https://threejs.org/\n[7]:https://devusercontact.com','{\"media\":{}}','{\"tags\":[\"update\",\"coursera\",\"nvidia\",\"GTC\",\"deep learning\",\"ai\",\"ThreeJS\"]}','2023-04-02 19:24:05'),(7,'I built a CLI application using Rust','my thoughts on getting rusty in the terminal','I\'m writing this blog post just to say that I\'ve written a small but useful\nterminal-based app using Rust called [rrdir][1]. This CLI application is used\nfor _r_ ecursively _r_ emoving a _dir_ ectory in your file tree. I got the idea \ndevelop this application when presented with the task of deleting all the \n`node_modules` directories that were scattered on my machine. \n\nAt first I considered creating a simple bash script but then I realized that\nI didn\'t want to set a `sudo rm -rf` command loose on my computer. So I turned\nto the famed, perhaps infamous, systems programming language [Rust][2] and I \nmust say, I was not disappointed. I had always wanted to complete even a small\nproject in Rust, this was my opportunity to do just that. \n\nSomething nice about a building a Rust app is that it compiles to a binary file. \nThis makes for easy execution in the command line. Rust also made the prospect of \npermanently removing directories from my file tree feel much safer than if I had used\na bash script (no matter how much I love [Bash][3]). rrdir is able to output the matching\ndirectories to the console and inquire weather or not the user would like to \nremove the list of directories. This allows the user a chance to inspect the \nreturned list to see if there are any directories that should not be deleted.\nRust\'s ownership system also guarantees that only the directories that were returned \nin the list will be removed. \n\nDeveloping this CLI program was honestly great fun and I feel like I became more \nwell acquainted with Rust as a result. If anyone who reads this is a more \nexperienced Rust dev, I would appreciate any insight that you may have to \noffer in the form of a pull request or otherwise. Thank you in advance. \n\ncode on, devUserContact\n\n[1]:https://github.com/devUserContact/rrdir.git\n[2]:https://www.rust-lang.org/\n[3]:https://www.gnu.org/software/bash/','{\"\": [\"\"]}','{\"tags\":[\"rust\", \"cli\", \"terminal\"]}','2023-11-02 04:14:39');
/*!40000 ALTER TABLE `blog_post` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-11-10  2:37:28
